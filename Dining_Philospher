#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
 
#define N 5
#define is_thinking 2
#define is_hungry 1
#define is_eating 0
#define left (ph_no + 4) % N
#define right (ph_no + 1) % N
 
int state[N];
int phil[N] = { 0, 1, 2, 3, 4 };
 
sem_t mutex;
sem_t P[N];
 
void test(int ph_no)
{
    if (state[ph_no] == is_hungry
        && state[left] != is_eating
        && state[right] != is_eating) {

        state[ph_no] = is_eating;
        sleep(2);
        printf("Philosopher %d takes fork %d and %d\n",ph_no + 1, left + 1, ph_no + 1);
        printf("Philosopher %d  is_eating\n", ph_no + 1);
        sem_post(&S[ph_no]);
    }
}
void pickup_fork(int ph_no)
{
    sem_wait(&mutex);

    state[ph_no] = is_hungry;
    printf("Philosopher %d  is_hungry\n", ph_no + 1);
    test(ph_no);
    sem_post(&mutex);
    sem_wait(&S[ph_no]);
    sleep(1);
}
void return_fork(int ph_no)
{
    sem_wait(&mutex);
    state[ph_no] = is_thinking;
    printf("Philosopher %d putting fork %d and %d down\n",
           ph_no + 1, left + 1, ph_no + 1);
    printf("Philosopher %d  is_thinking\n", ph_no + 1);
    test(left);
    test(right);
    sem_post(&mutex);
}
 
void* philospher(void* num)
{
    while (1) {
        int* i = num;
        sleep(1);
        pickup_fork(*i);
        sleep(0);
        return_fork(*i);
    }
}
 
int main()
{
 
    int i;
    pthread_t thread_id[N];
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++){
        sem_init(&S[i], 0, 0);
    }
    for (i = 0; i < N; i++) {
        pthread_create(&thread_id[i], NULL,
                       philospher, &phil[i]);
        printf("Philosopher %d is_thinking\n", i + 1);
    }
    for (i=0;i<N;i++){
        pthread_join(thread_id[i], NULL);
    }
	return 0;
}
